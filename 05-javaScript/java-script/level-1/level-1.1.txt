.
.
Java-Script
.
.
- level 1: Java-Script
- level 1.1 - JavaScript
- level 1.2 - JavaScript -- External JavaScript
- level 1.3 - comment
- level 1.4 - console.*()
- level 1.5 - document.write()
- level 1.6 - DataType / variable - math
-
- 


.
.
- level 1 - Java-Script

-- JavaScript (JS) is a high-level, interpreted programming language that conforms to the ECMAScript specification. 
   It is a language that is also characterized as dynamic, weakly typed, prototype-based and multi-paradigm.
   Alongside HTML and CSS, JavaScript is one of the three core technologies of the World Wide Web.

-- JavaScript is one of the most popular programming for webpages, process data, applications (mobile, desktop, games)
   JavaScript is a client-side and/or server-side.


--- Java-Script


.
.
- level 1.1 - JavaScript

-- JavaScript on the web lives inside the HTML document. 
   In HTML, JavaScript code must be inserted between <script> and </script> tags:

--- example:

    <script>
        ...
    </script>

    <!-- no java script error message -->
    <noscript>
        <h3>JavaScript is Required</h3>
    </noscript>  

-- JavaScript can be placed in the HTML page's <body> and <head> sections.

-!- script in the <head> section, will be executed before the <body> is rendered. 

-!- place your script at the end of the <body> tag.

--- example: 

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <script>
            console.log("head script");    
        </script>        
    </head>

    <body>
        <h1>
        <script>
            console.log("body script");    
        </script>
        <!--end of <body> body -->
    </body>

    </html>

--- example: <java-Script-1.1.html>

.
.
- level 1.2 - JavaScript -- External JavaScript

-- Java Script can be placed in external files. (*.js)
-- External scripts are useful and practical when the same code is used in a number of different web pages.
-- Having JS scripts in separate files makes your code much readable and clearer.
--- file extension (*.js)

--- example:

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title> java-Script </title>

        <!-- external java script file -->
        <script src="java-script-html.js"></script>    
    </head>

    <body>
    </body>
    </html>

--- example: 

html file: 
<java-script-html.html>

Javascript file:
<java-script-html.js>

.
.
- level 1.3 - comment

// one line comment 

/*
* multi line comment
*/

--- example: <java-Script-1.1.html>

.
.
- level 1.4 - console.*()

-- 

.
.
- level 1.5 - document.write()

-- The document.write() function writes a string into our HTML document (TEXT and/or HTML). 

-!- The document.write() method should be used only for testing. 

--- example:

    document.write("<h1>document.write test </h1>");

--- example: <java-Script-1.1.html>

-!- You can output almost everything in the webpage using JavaScript. 
    Many JavaScript frameworks use this to create HTML pages.

.
.
- level 1.6 - DataType / variable

-- JavaScript Variables are containers for storing data values. 
   The value of a variable can change throughout the program.

-- JavaScript is case sensitive. 
--- example: the variables "lastName" and "lastname", are two different variables.

-- JavaScript provides seven/7 different data types which are:
   undefined, null, boolean, string, symbol, number, object.

-- undefined --> not set yet
-- null --> nothing 
-- boolean --> true/false
-- string --> text value
-- number --> number value
-- symbol --> unique value
-- object --> key-value pair

-- var --> var can be used in all the program
-- lest --> let can be used in code scope
-- const --> const is a constants that never change.

-- example:

<script>
    var variableVar = "var can be used in all the program ";
    let variableLet = "let can be used in code scope";
    const constTitle = "const is a constants that never change";
    const pi = 3.14; //const is a constants that never change.

    var temp;  // undefined //
    var number = 33;

    number = number + 22;
    temp = "tempData";
 
    console.log("number ==> " + number);
    console.log("temp ==> " + temp);


    if (stLastName ===  undefined )
    {
        console.log(" stLastName is " + typeof(stLastName) ) ; // undefined //
    }
</script>

--- example: <java-Script-1.2.html>


-- variable camel Case --> camelCaseVariable

--- example:

<script>
    var stBanner = "Welcome .";
    var userAge = 55;
    var isUserNew = true;
</script>

-- typeof - type of variable

--- example:

<script>
    var stLastName = "jack"
    typeof(stLastName);
</script>

--- example: <java-Script-1.2.html>

.
.
- level 1.7 - DataType / variable - math

--- example:

<script>
    num3 = num1 + num2;
    num3 = num2 - num1;
    num3 = num1 * num2;
    num3 = num1 / num2;
    num3 = num2 % num1;

    var numDecimal_1 = 1.1;
    numDecimal_1 += 2.2;
    numDecimal_1 -= 2.2;
    numDecimal_1 *= 2.2;
    numDecimal_1 /= 2.2;
    numDecimal_1 %= 2.2;

    num1 += 2;
    num1 -= 2;
    num1 *= 2;
    num1 /= 2;
    num1 %= 2;

</script>    

    --- example: <java-Script-1.3.html> 


-!- JavaScript variables are declared, they have an initial value of "undefined".
    If you do a mathematical operation on an "undefined" variable your result will be "NaN" (Not A Number).

--- example:

    // unassigned variable value //
    var stName ;
    var a;
    console.log("stName === " + stName); //undefined
    console.log("a += 2 === " + (a += 2) ); //NaN

.
.
- level 1.8 - JavaScript variable Naming Rules:

-- The first character must be a letter, an underscore (_), or a dollar sign ($). 
   Subsequent characters may be letters, digits, underscores, or dollar signs.

-- Numbers are not allowed as the first character.

-- Variable names cannot include a mathematical or logical operator in the name. 
   For instance, 2*something or this+that;

-- JavaScript names must not contain spaces.

-!- Hyphens are not allowed in JavaScript. It is reserved for subtractions.

.
.
- level 1.9 - JavaScript JavaScript Reserved Words 

abstract , arguments , await* , boolean , break , byte , case , catch , 
char , class* , const , continue , debugger , default , delete , do , 
double , else , enum* , eval , export* , extends* , false , final , 
finally , float , for , function , goto , if , implements , import* ,  
in , instanceof , int , interface , let* , long , native , new , 
null , package , private , protected , public , return , short , static ,  
super* , switch , synchronized , this , throw , throws , transient , true , 
try , typeof , var , void , volatile , while , with , yield


