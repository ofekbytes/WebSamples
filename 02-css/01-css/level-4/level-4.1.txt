.
.
css - Positioning and Layout.
.
.
- level 4.01 - The display Property (display: block/inline)
- level 4.02 - The visibility Property
- level 4.03 - Positioning

.
.
- level 4.01 - The display Property (display: block/inline)
.

- display: block

-- Every element on a web page is a rectangular box.
   "display" property determines how that rectangular box behaves/displayed. 
   "block" element is an element that takes up the fullest width available, 
   with line breaks before and after.


--- example: <span> elements as block-level elements:

    span 
    {
        display: block;
    }


--- example: <span> elements as block-level elements:
    <css-4.01.1.html>



- display: inline

An inline element only takes up as much width as necessary, 
and does not force line breaks.

--- example: display: inline

    p 
    {
        display: inline;
    }


--- example: display: inline
    <css-4.01.2.html>

-!- Setting the display property of an element only changes how the element is displayed, 
    not what kind of element it is. 
    an inline element with display:block is not allowed to have other block elements inside it.



- display:none

-- display:none hides an element, so it does not take up any space. 
   The element will be hidden, and the page will be displayed as if the element is not there.

--- example: display: none

    h1 
    {
        display: none;
    }


--- example: display: none
    <css-4.01.3.html>

-!- There are display values, such as 
   list-item, table, table-cell, table-column, grid, etc. 

https://devdocs.io/css/display

.
.
- level 4.02 - The visibility Property
.

- The visibility property specifies whether an element is visible or hidden. 
  The most common values are visible and hidden. 

-- Hiding an element can be done by setting the 
   display property to "none" 
   or the visibility property to "hidden". 



-- visibility:hidden -  
   hides an element, but it will still take up the same space (as before).

--- example: visibility: "hidden"
    .hide {
        visibility: hidden;
    }

--- example: visibility: "hidden"
    <css-4.02.1.html>



-- display:none -
   hides an element, without holding a place for that element. 

--- example: display:none


--- example: display:none
    <css-4.02.2.html>

.
.
- level 4.03 - Positioning
.

- The position property specifies the type of positioning method used for an element
 (static, relative, fixed, absolute or sticky).

- position values properties:
-- static
-- relative
-- fixed
-- absolute
-- sticky

- Elements are then positioned by using the properties:
-- top property
-- bottom property
-- left property
-- right property
-!- these properties will not work unless the position property is set first. T
-!- They work differently depending on the position value properties.




- The CSS positioning properties allow you to position an element. 
  It can also place an element behind another, 
  and specify what should happen when an element's content is too big.

-- Elements can be positioned using the properties:
   top, bottom, left, right properties. 
   However, these properties will not work unless the position property is set first. 
   They also work differently depending on the positioning method.

Static Positioning
HTML elements are positioned static by default. A static positioned element is always positioned according to the normal flow of the page.



--- example: 
    <css-4.03.1.html>

// delete // 

https://www.sololearn.com/Play/CSS

//https://www.w3schools.com/css/css_positioning.asp


