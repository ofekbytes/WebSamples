.
.
css - Positioning and Layout.
.
.
- level 4.01 - The display Property (display: block/inline)
- level 4.02 - The visibility Property
- level 4.03 - Positioning
- level 4.04 - Positioning - Static Positioning
- level 4.05 - Positioning - Fixed Positioning
- level 4.06 - Positioning - Relative Positioning
- level 4.07 - Positioning - Absolute Positioning
- level 4.08 - Positioning - sticky Positioning


.
.
- level 4.01 - The display Property (display: block/inline)
.

- display: block

-- Every element on a web page is a rectangular box.
   "display" property determines how that rectangular box behaves/displayed. 
   "block" element is an element that takes up the fullest width available, 
   with line breaks before and after.


--- example: <span> elements as block-level elements:

    span 
    {
        display: block;
    }


--- example: <span> elements as block-level elements:
    <css-4.01.1.html>



- display: inline

An inline element only takes up as much width as necessary, 
and does not force line breaks.

--- example: display: inline

    p 
    {
        display: inline;
    }


--- example: display: inline
    <css-4.01.2.html>

-!- Setting the display property of an element only changes how the element is displayed, 
    not what kind of element it is. 
    an inline element with display:block is not allowed to have other block elements inside it.



- display:none

-- display:none hides an element, so it does not take up any space. 
   The element will be hidden, and the page will be displayed as if the element is not there.

--- example: display: none

    h1 
    {
        display: none;
    }


--- example: display: none
    <css-4.01.3.html>

-!- There are display values, such as 
   list-item, table, table-cell, table-column, grid, etc. 

https://devdocs.io/css/display

.
.
- level 4.02 - The visibility Property
.

- The visibility property specifies whether an element is visible or hidden. 
  The most common values are visible and hidden. 

-- Hiding an element can be done by setting the 
   display property to "none" 
   or the visibility property to "hidden". 



-- visibility:hidden -  
   hides an element, but it will still take up the same space (as before).

--- example: visibility: "hidden"
    .hide {
        visibility: hidden;
    }

--- example: visibility: "hidden"
    <css-4.02.1.html>



-- display:none -
   hides an element, without holding a place for that element. 

--- example: display:none


--- example: display:none
    <css-4.02.2.html>

.
.
- level 4.03 - Positioning
.

- The position property specifies the type of positioning method used for an element
 (static, relative, fixed, absolute or sticky).

- position values properties:
-- static
-- fixed
-- relative
-- absolute
-- sticky

- Elements are then positioned by using the properties:
-- top property
-- bottom property
-- left property
-- right property
-!- these properties will not work unless the position property is set first.
-!- They work differently depending on the position value properties.

-- The CSS positioning properties allow you to position an element. 
   It can also place an element behind another, 
   and specify what should happen when an element's content is too big.
.
.
- level 4.04 - Positioning - Static Positioning
.

-- HTML elements are positioned static by default. 
   A static positioned element is always positioned according to the normal flow of the page.

--- example: "Static" Positioning
    position: static;


--- example: Static Positioning
    <css-4.04.1.html>
    <css-4.04.2.html>

-!- Static positioned elements are not affected by the top, bottom, left, and right properties.
.
.
- level 4.05 - Positioning - Fixed Positioning
.

-- position element with a fixed position (position: fixed;) is positioned 
   relative to the browser window, and will it always stays in the same place (not move)
   even if the window is scrolled.

-- The position can be specified using one or more of the properties top, right, bottom, left. 

-!- A fixed element does not leave a gap in the page where it would normally have been located.

--- example: fixed Positioning

    p.position_fixed {
        position: fixed;
        top: 40px;
        /*right: 515px;*/
        left: 8;
        color: red;
    }

--- example: fixed Positioning
    <css-4.05.1.html>
    <css-4.05.2.html>
.
.
- level 4.06 - Positioning - Relative Positioning
.

-- A relative positioned element (position: relative;) is positioned relative to its normal position. 
   The properties top, right, bottom, left, 
   can be used to specify how the rendered box will be shifted. 


--- example: <div> Relative Positioning
    div.position_relative {
        position: relative;
        left: 30px;
        border: 3px solid #73AD21;
    }

--- example: <span> Relative Positioning
    span {
        background: green;
        color: white;
        position: relative;
        top: 150px;
        left: 50px;
    }

--- example: <img> Relative Positioning
    img {
        position: relative;
        left: 30px;
    }

-- The content of relatively positioned elements can be moved and overlap other elements, 
   but the reserved space for the element is still preserved in the normal flow.

--- example: Relative Positioning
    <css-4.06.1.1.html>
    <css-4.06.1.2.html>

--- example: Relative Positioning (image inside image)
    <css-4.06.2.1.html>

--- example: Relative Positioning <div> tag.
    <css-4.06.3.1.html>
    <css-4.06.3.2.html>

-!- This value ( position: relative;) cannot be used for 
    table cells, columns, column groups, rows, row groups, captions.
.
.
- level 4.07 - Positioning - Absolute Positioning
.

-- An absolute position element is positioned relative to the first parent element 
   that has a position other than static. 
   If no such element is found, the containing block is <html>.

-- Absolutely positioned elements are removed from the normal flow. 
   The document and other elements behave like the absolutely positioned element does not exist.

-!- Absolutely positioned elements can overlap other elements.

--- example: Absolute Positioning
    div.absolute {
        position: absolute;
        top: 80px;
        right: 0;
        width: 200px;
        height: 100px;
        border: 3px solid #73AD21;
    }

--- example: Absolute Positioning
    <css-4.07.1.html>
    <css-4.07.2.html>
.
.
- level 4.08 - Positioning - sticky Positioning
.

-- sticky Positioning An element with (position: sticky;) 
   is positioned based on the user's scroll position.

-- A sticky element toggles between "relative" and "fixed", depending on the scroll position. 
   It is positioned relative until a given offset position is met in the screen - 
   then it "sticks" in place (like position:fixed).

--- example: sticky Positioning
    position: -webkit-sticky;
    position: sticky;

--- example: sticky Positioning
    <css-4.08.1.html>

--- example: sticky Positioning - transperet
    <css-4.08.2.html>

--- example: sticky Positioning - not transperet
    <css-4.08.3.html>


///./////.///unsorted
https://www.w3schools.com/css/css_positioning.asp

.
.
-- z-index


--- example: sticky Positioning + transperet
    <css-z-index.html>

--- example: sticky Positioning + transperet
    /* transperet */
    z-index: -1;





// delete // 

All CSS Positioning Properties
Property	Description
bottom	Sets the bottom margin edge for a positioned box

clip	Clips an absolutely positioned element
https://www.w3schools.com/cssref/pr_pos_clip.asp

left	Sets the left margin edge for a positioned box
position	Specifies the type of positioning for an element
right	Sets the right margin edge for a positioned box
top	Sets the top margin edge for a positioned box

z-index	Sets the stack order of an element
https://www.w3schools.com/cssref/pr_pos_z-index.asp

https://www.sololearn.com/Play/CSS

//https://www.w3schools.com/css/css_positioning.asp


